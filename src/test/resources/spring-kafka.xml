<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:si="http://www.springframework.org/schema/integration"
       xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
       xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/kafka http://www.springframework.org/schema/integration/kafka/spring-integration-kafka-1.0.xsd">

    <!-- zookeeper配置 -->
    <int-kafka:zookeeper-connect id="zookeeperConnect"
                                 zk-connect="localhost:4180" zk-connection-timeout="6000"
                                 zk-session-timeout="6000" zk-sync-time="2000"/>

    <!-- producerContext配置 -->
    <int-kafka:producer-context id="kafkaProducerContext">
        <int-kafka:producer-configurations>
            <int-kafka:producer-configuration
                    broker-list="localhost:9093" key-class-type="java.lang.String"
                    value-class-type="java.lang.String" topic="test1" value-encoder="kafkaEncoder"
                    key-encoder="kafkaEncoder" compression-codec="default"/>
            <int-kafka:producer-configuration
                    broker-list="localhost:9093" topic="test2" compression-codec="default"
                    async="true"/>
            <int-kafka:producer-configuration
                    broker-list="localhost:9093" topic="regextopic.*" compression-codec="default"/>
        </int-kafka:producer-configurations>
    </int-kafka:producer-context>

    <!-- ConsumerContext配置 -->
    <int-kafka:consumer-context id="kafkaConsumerContext"
                                consumer-timeout="4000" zookeeper-connect="zookeeperConnect">
        <int-kafka:consumer-configurations>
            <int-kafka:consumer-configuration
                    group-id="default" value-decoder="kafkaDecoder" key-decoder="kafkaDecoder"
                    max-messages="5000">
                <int-kafka:topic id="test1" streams="4"/>
                <int-kafka:topic id="test2" streams="4"/>
            </int-kafka:consumer-configuration>
            <int-kafka:consumer-configuration
                    group-id="default3" value-decoder="kafkaDecoder" key-decoder="kafkaDecoder"
                    max-messages="10">
                <int-kafka:topic-filter pattern="regextopic.*"
                                        streams="4" exclude="false"/>
            </int-kafka:consumer-configuration>
        </int-kafka:consumer-configurations>
    </int-kafka:consumer-context>

    <!-- inbound-channel-adapter配置 -->
    <int-kafka:inbound-channel-adapter
            id="kafkaInboundChannelAdapter" kafka-consumer-context-ref="kafkaConsumerContext"
            auto-startup="true" channel="inputFromKafka">
        <si:poller fixed-delay="10" time-unit="MILLISECONDS"
                   max-messages-per-poll="5"/>
    </int-kafka:inbound-channel-adapter>

    <!-- outbound-channel-adapter配置 -->
    <int-kafka:outbound-channel-adapter
            id="kafkaOutboundChannelAdapter" kafka-producer-context-ref="kafkaProducerContext"
            auto-startup="true" channel="outToKafka" topic="foo"
            message-key-expression="header.messageKey">
    </int-kafka:outbound-channel-adapter>

    <!-- task线程池配置 -->
    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>

    <bean id="kafkaEncoder"
          class="org.springframework.integration.kafka.serializer.avro.AvroReflectDatumBackedKafkaEncoder">
        <constructor-arg value="java.lang.String"/>
    </bean>

    <bean id="kafkaDecoder"
          class="org.springframework.integration.kafka.serializer.avro.AvroReflectDatumBackedKafkaDecoder">
        <constructor-arg value="java.lang.String"/>
    </bean>

    <!-- MessageChannel通道配置 -->
    <si:channel id="outToKafka"/>
    <si:channel id="inputFromKafka"/>


</beans>